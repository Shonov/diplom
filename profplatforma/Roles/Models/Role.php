<?php

namespace ProfPlatforma\Roles\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;
use ProfPlatforma\Users\Models\User;

class Role extends Model
{
    protected $table = 'roles';

    public $timestamps = false;

    protected $with = [
        'rights',
    ];

    protected $fillable = [
        'title',
    ];

    public function rights()
    {
        return $this->hasMany(RoleRight::class);
    }
    public function getUsersCount()
    {
        return DB::select('SELECT COUNT (user_id) FROM user_roles WHERE role_id = ?', [$this->id])[0]->count;
    }

    public function users()
    {
        return $this->belongsToMany(User::class, 'user_roles');
    }

    public function getModulesAttribute()
    {
        $rights = $this->rights;
        $modules = [];
        foreach ($rights as $right) {
            $id = $right->module->id;

            $modules[$id]['module'] = $right->module;

            $modules[$id]['rights'][] = $right->right;
        }

        $modules = array_values($modules);

        return $modules;
    }

    public function save(array $options = [])
    {
        return parent::save($options); // TODO: Change the autogenerated stub
    }

    public function createRights($modules)
    {
        $roleRights = [];
        foreach ($modules as $module) {
            foreach ($module['right_ids'] as $rightId) {
                $roleRights[] = new RoleRight([
                    'module_id' => $module['id'],
                    'right_id' => $rightId,
                    'role_id' => $this->id,
                ]);
            }
        }

        $this->rights()->saveMany($roleRights);
    }
}
